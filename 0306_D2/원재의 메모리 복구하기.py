# 원재가 실수로 메모리 초기화!
# 원본 값으로 수정하려고했으나 문제 발생!
# 메모리 bit중 하나를 골라 0인지 1인지 결정하면 해당 값이 메모리의 끝까지 덮어씌우는 것
# 예를 들어 지금 메모리 값이 0100이고, 3번째 bit를 골라 1로 설정하면 0111
# 원래 상태가 주어질 때 초기화 상태 (모든 bit가 0) 에서 
# 원래 상태로 돌아가는데 최소 몇 번이나 고쳐야 하는지 계산

# 첫줄 테스트케이스 개수
# 다음 줄 원 bit 상태

# 테스트 케이스 개수 입력 받기
T = int(input())

# 테스트 케이스 반복
for tc in range(1, T+1):
    # N : bit의 원 상태
    N = list(map(int, input()))
    # cnt : 가뀌는 횟수
    cnt = 0
    # bit : 원 bit 초기 상태
    bit = 0

    # bit 길이만큼 반복
    for i in range(len(N)):
        # 만약 N의 i번째가 bit와 같지 않으면
        if N[i] != bit:
            # 변경해야하니 횟수 +1
            cnt += 1
            # bit를 N의 i와 같이 변경. 똑같을 때까지 반복
            bit = N[i] 

    # 출력
    print(f'#{tc} {cnt}')
    
